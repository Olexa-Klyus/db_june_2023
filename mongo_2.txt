// агрегатні функції
use db_2
// dump із hw2.dump
db.teacher.find()
db.students.find()

// групування
db.teacher.aggregate([
    {
        $group: {
            _id: "$lesson",  // групує об'єкти за полем lesson
            lessonsCount: {$sum: 1},  // рахує, скільки є об'єктів за цією ознакою (в цій групі)
            min: {$min: "$payment"},  // мінімальна зарплата в групі
            max: {$max: "$payment"},  // максимальна зарплата в групі
            sumSalary: {$sum: "$payment"},  // сума зарплат у групі
            avgSalary: {$avg: "$payment"}  // середня зарплата в групі
        }
    }
])

// кожний чейн (тобто {}), який ми передаємо функції-агрегатору формує якийсь результат і передає його наступному чейнові.
db.teacher.aggregate([
    {
        $group: {
            _id: "$lesson",
            lessonsCount: {$sum: 1},
        }
    },  // закінчився чейн 1
    {
        $sort: {
            lessonsCount: -1  // сортуємо за lessonsCount від більшого до меншого; basic буде першим, бо в нього 3.
        }
    },  // закінчився чейн 2
    {
        $addFields: {  // додаємо поле
            lesson: "$_id"  // воно буде мати значення _id, що вище.
        }
    },
    {
        $project: {  // тут можемо щось виключати
            _id: 0 // 0=виключили поле, передали на фронтенд
        }
    }
])

// і колекція студентів, і колекція вчителів має клас; поєднуємо за цією ознакою
// шукаємо всіх студентів вчителя і додаємо цей масив студентів до об'єкту вчителя

db.teacher.aggregate([
    {
        $lookup: {
            from: "students",  // з якою таблицею з'єднуємо
            localField: "class_curator",  // за яким полем у таблиці вчителів будемо прикріплювати
            foreignField: "class",  // до якого поля в таблиці студентів будемо прикріплювати
            as: "myStudents"  // називаємо цей масив; це буде ключ в об'єкті вчителя + доданий масив студентів
        }
    },
    {
        $sort: {class_curator: 1}
    },
    {
        $limit: 2
    },
    {
        $skip: 1
    }
])

// пошук
db.teacher.aggregate([
    {
        $lookup: {
            from: "students",
            localField: "class_curator",
            foreignField: "class",
            as: "myStudents"
        }
    },
    {
        $match: {  // аналогічне до find
            // "myStudents.name":"Ivan",  //знайшло всіх вчителів, у кого є студент Іван
            "myStudents.parents.profession": "doctor"  // де в студентів(ок) є батько/мати лікар(ка)
        }
    }
])

db.teacher.aggregate([
    {
        $match: {  // шукаємо всіх вчителів, в кого клас > 5.
            // І тут змінюємо чергу чейнів, бо нам не треба працювати з усією БД, а потім шукати > 5 клас.
            // А спочатку знайти поодинці всіх вчителів>5 клас, а потім що-небудь робити.
            class_curator: {$gt: 5}
        }
    },
    {
        $lookup: {
            from: "students",
            localField: "class_curator",
            foreignField: "class",
            as: "myStudents"
        }
    },
    {
        $sort:{class_curator:1}
    },
    {
        $unwind:"$myStudents"  // роздробити масив myStudents, тобто буде вже не масив студентів у кожного вчителя,
        // а по одному об'єктові студента; потім знову той самий вчитель і в ньому 1 об'єкт студент; і так стільки разів,
        // скільки було студентів у масиві myStudents.
    },
    // виявляємо, скільки в кожного студента є батьків-лікарів; розкладаємо масив parents;
    {
        $unwind:"$myStudents.parents"  // розкладаємо і масив parents
    },
    {
       $match:{
           "myStudents.parents.profession":"doctor"  // і тепер знаходимо, хто з них лікар(ка)
       }
    },
    {
        $count:"DoctorCount"
    }
])
    // #
    // [
    // {
    //     "DoctorCount": 2
    // }
    // ]